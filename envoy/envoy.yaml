admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 } # envoy docker container port 9901

static_resources:
  listeners: # listen request from the frontend
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 } # listen to envoy port 8080, grpc-web client will send request to 8080
      filter_chains: # filters to be applied to requests on port 8080
        - filters:
            - name: envoy.filters.network.http_connection_manager # default http request filter
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                # log out to console stdout
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                codec_type: auto
                stat_prefix: ingress_http # a key name which can be used to get runtime info via admin stats on :9901/stats
                route_config: # defines how to route the request to backend cluster
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ['*'] # target domains
                      routes:
                        - match: { prefix: '/' } # match every request
                          route:
                            cluster: echo_service # match all requests to echo_service cluster
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                        # - match: { prefix: '/some_route' } # match request on /some_route, note that '/' will win, if using '/' as a routing rule, move it to the last
                        #   route:
                        #     cluster: some_other_service
                        #     timeout: 0s
                        # - match: { prefix: '/admin' } # block request for visiting certain endpoint
                        #   direct_response: {status: 403, body: {inline_string: "Forbidden request"}}
                        # redirect: #redirect http traffic to https
                        #   path_redirect: "/"
                        #   https_redirect: true
                      cors:
                        allow_origin_string_match:
                          - prefix: '*'
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: '1728000'
                        expose_headers: custom-header-1,grpc-status,grpc-message
                http_filters:
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.router
  clusters: # services behind envoy proxy
    - name: echo_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin # load balancing policy
      load_assignment:
        cluster_name: echo_service # no idea why there are a 'name' and a 'cluster_name' as well
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 'server' # docker service name, 'host.docker.internal' will only work locally
                      port_value: 9090 # send HTTP/2 call to port 9090 -> node server
            # - endpoint: # could add some other endpoints
            #     address:
            #       socket_address:
            #         address: 'some other service'
            #         port_value: 9999
